import os
import configparser
from github import Github, GithubException


from app_constants import (
    CONFIG_FILE,ENV_GITHUB_TOKEN,CONFIG_REPO_NAME,CONFIG_REPO_OWNER,INPUT_FILE,OUTPUT_FILE,GITHUB_CONFIG_SECTION
)
from Github_Reader import (
    list_repo_contents_and_read_from_file,
    parse_gradle_file_info  
)

def load_config(config_file=CONFIG_FILE):
    config=configparser.ConfigParser
    try:
        config.read(config_file)
        if not config.sections():
            print(f"Warning: Config file '{config_file}'.is empty or not found. ")
        return config
    except Exception as e:
        print("Error loading config file '{config_file}': {e}")
        return None

def main():
    output_filename=OUTPUT_FILE
    config=load_config()
    repo_owner=" "
    repo_name=" "
    input_path=" "
    if not config:
        exit("Existing config. load issue")
    github_token=os.environ.get(ENV_GITHUB_TOKEN)
    if not github_token:
        print("ERROR, github access token not found")
        exit("Exiting.")
    if GITHUB_CONFIG_SECTION in config:
        try:
            repo_owner=config.get(GITHUB_CONFIG_SECTION,CONFIG_REPO_OWNER)
            repo_name=config.get(GITHUB_CONFIG_SECTION,CONFIG_REPO_NAME)
            input_path=config.get(GITHUB_CONFIG_SECTION,INPUT_FILE, fallback="")
        except configparser.NoOptionError as e:
            print(f"ERROR: Missing option in '{GITHUB_CONFIG_SECTION}' section of '{input_path}': {e}")
            exit("Exiting")
        except Exception as e:
            print(f"ERROR: reading github config file '{input_path}': {e}")
            exit("Exiting")
    else:
        print(f"ERROR: Section '{GITHUB_CONFIG_SECTION}' not found in '{input_path}'.")
        exit("Exiting")
    if not repo_name or repo_owner:
        print("Repo owner/name not configured")
        exit("Exiting")
    if input_path:
        print(f"File to read: {input_path}")
    '''else:
        print(f"File to read not specified") '''
    print(f"Repo structure to written to '{output_filename}'")
    
    #---Github API Connection---
    repo=None
    try:
        g=Github(github_token)
        g.get_repo(f"{repo_owner}/{repo_name}")
        print(f"Successfully accessed repo: {repo.full_name}")
    except GithubException as ex:
        print(f"Github API Error: {ex.status}{ex.data.get('message','')}")
        if ex.status==401:
            print(f"Authentication Error. Please check github token")
        elif ex.status==404:
            print(f"Not Found Error. Please check owner and name")
        else:
            print(f"Please check github token and/or repo details(owner and name)")
        exit("Exiting")
    except Exception as ex:
        print(f"Unexpected Error occurred: {ex}")
        exit("Exiting")
        
        #Get repo structure and read file content----
        components, file_content= list_repo_contents_and_read_from_file(repo,input_path,output_filename)
        if file_content:
            #Check for gradle file
            if input_path.endwith((".gradle","gradle.kts")):
                extracted_data=parse_gradle_file_info(file_content,output_filename)
                if extracted_data:
                    print("Extracted Info")
                    for key,value in extracted_data.items():
                        print(f"{key}:{value}")
                print("---End of Gradle File---")
        else:
            print("Couldn't retrieve repo structure or file content.")
        print("\nScript Finished.")
                
    
    